{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 12,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "htmlNode.innerHTML = `\n  <style>\n    .toggle-container {\n      display: flex;\n      flex-direction: row;\n      gap: 40px;\n      justify-content: center;\n      padding-top: 40px;\n    }\n    .toggle-group {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .switch {\n      position: relative;\n      display: inline-block;\n      width: 60px;\n      height: 34px;\n    }\n    .switch input {\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n    .slider {\n      position: absolute;\n      cursor: pointer;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: #ccc;\n      transition: 0.4s;\n      border-radius: 34px;\n    }\n    .slider:before {\n      position: absolute;\n      content: \"\";\n      height: 26px;\n      width: 26px;\n      left: 4px;\n      bottom: 4px;\n      background-color: white;\n      transition: 0.4s;\n      border-radius: 50%;\n    }\n    input:checked + .slider {\n      background-color: rgb(149, 78, 215);\n    }\n    input:checked + .slider:before {\n      transform: translateX(26px);\n    }\n    .state-text {\n      margin-top: 10px;\n      font-size: 18px;\n      color: white;\n    }\n    .label {\n      color: white;\n      font-weight: bold;\n      margin-bottom: 5px;\n    }\n  </style>\n\n  <div class=\"toggle-container\">\n    <div class=\"toggle-group\">\n      <div class=\"label\">wifi</div>\n      <label class=\"switch\">\n        <input type=\"checkbox\" id=\"toggleOne\">\n        <span class=\"slider\"></span>\n      </label>\n      <div id=\"stateOne\" class=\"state-text\">0</div>\n    </div>\n\n    <div class=\"toggle-group\">\n      <div class=\"label\">bluetooth</div>\n      <label class=\"switch\">\n        <input type=\"checkbox\" id=\"toggleTwo\">\n        <span class=\"slider\"></span>\n      </label>\n      <div id=\"stateTwo\" class=\"state-text\">0</div>\n    </div>\n  </div>\n`;\n\nfunction handleToggle(checkboxId, stateId, topic, storageKey) {\n  const checkbox = htmlNode.querySelector(`#${checkboxId}`);\n  const stateText = htmlNode.querySelector(`#${stateId}`);\n\n  // Restore saved state\n  const saved = localStorage.getItem(storageKey);\n  if (saved === \"1\") {\n    checkbox.checked = true;\n    stateText.textContent = \"1\";\n  }\n\n  // 1/0 on change\n  checkbox.addEventListener(\"change\", () => {\n    const value = checkbox.checked ? \"1\" : \"0\";\n    stateText.textContent = value;\n    localStorage.setItem(storageKey, value);\n\n//POST request\n    fetch(\"http://172.20.10.3:1880/publish\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        topic: topic,\n        payload: value\n      })\n    }).then(res => {\n      if (!res.ok) {\n        console.error(\"MQTT publish failed:\", res.statusText);\n      }\n    }).catch(err => console.error(\"Fetch error:\", err));\n  });\n}\n\n// Bind both toggles\nhandleToggle(\"toggleOne\", \"stateOne\", \"topic/toggle_one\", \"toggleStateOne\");\nhandleToggle(\"toggleTwo\", \"stateTwo\", \"topic/toggle_two\", \"toggleStateTwo\");\n\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "refId": "A"
        }
      ],
      "title": "Panel Title",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "grafana-mqtt-datasource",
        "uid": "PBA9FB8DAC51D59B8"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "fixed"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 12,
        "y": 0
      },
      "id": 9,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "g{\r\n  background-color: rgb(149, 78, 215);\r\n}\r\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "// Sets the text from customProperties\nconst htmlgraphicsText = htmlNode.getElementById('htmlgraphics-text');\n\nif (htmlgraphicsText) {\n  htmlgraphicsText.textContent = customProperties.text;\n\n  // Change the text color based on the theme\n  if (theme.isDark) {\n    htmlgraphicsText.style.color = 'green';\n  } else {\n    htmlgraphicsText.style.color = 'red';\n  }\n}\n",
        "onInitOnResize": false,
        "onRender": "htmlNode.innerHTML = `\r\n  <style>\r\n    .toggle-container {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n    }\r\n    .switch {\r\n      position: relative;\r\n      display: inline-block;\r\n      width: 60px;\r\n      height: 34px;\r\n    }\r\n    .switch input {\r\n      opacity: 0;\r\n      width: 0;\r\n      height: 0;\r\n    }\r\n    .slider {\r\n      position: absolute;\r\n      cursor: pointer;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background-color: #ccc;\r\n      transition: 0.4s;\r\n      border-radius: 34px;\r\n    }\r\n    .slider:before {\r\n      position: absolute;\r\n      content: \"\";\r\n      height: 26px;\r\n      width: 26px;\r\n      left: 4px;\r\n      bottom: 4px;\r\n      background-color: white;\r\n      transition: 0.4s;\r\n      border-radius: 50%;\r\n    }\r\n    input:checked + .slider {\r\n      background-color: rgb(149, 78, 215);\r\n    }\r\n    input:checked + .slider:before {\r\n      transform: translateX(26px);\r\n    }\r\n    .state-text {\r\n      margin-top: 10px;\r\n      font-size: 24px;\r\n      color: white;\r\n    }\r\n  </style>\r\n\r\n  <div class=\"toggle-container\">\r\n    <label class=\"switch\">\r\n      <input type=\"checkbox\" id=\"toggleCheckbox\">\r\n      <span class=\"slider\"></span>\r\n    </label>\r\n    <div id=\"stateValue\" class=\"state-text\">0</div>\r\n  </div>\r\n`;\r\n\r\nconst checkbox = htmlNode.querySelector(\"#toggleCheckbox\");\r\nconst stateText = htmlNode.querySelector(\"#stateValue\");\r\n\r\n// previous state\r\nconst savedState = localStorage.getItem(\"myToggleState\");\r\nif (savedState === \"1\") {\r\n  checkbox.checked = true;\r\n  stateText.textContent = \"1\";\r\n} else {\r\n  checkbox.checked = false;\r\n  stateText.textContent = \"0\";\r\n}\r\n\r\ncheckbox.addEventListener(\"change\", () => {\r\n  const value = checkbox.checked ? \"1\" : \"0\";\r\n  stateText.textContent = value;\r\n  localStorage.setItem(\"myToggleState\", value);\r\n\r\n  // Publish to Node-RED\r\n  fetch(\"http://localhost:1880/publish\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      topic: \"topic/toggle_state\",\r\n      payload: value\r\n    })\r\n  })\r\n  .then(res => {\r\n    if (!res.ok) {\r\n      console.error(\"MQTT publish failed:\", res.statusText);\r\n    }\r\n  })\r\n  .catch(err => console.error(\"Fetch error:\", err));\r\n});\r\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": false
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-mqtt-datasource",
            "uid": "PBA9FB8DAC51D59B8"
          },
          "refId": "A"
        }
      ],
      "title": "WI-FI",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 4,
        "x": 12,
        "y": 4
      },
      "id": 11,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "\n",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "htmlNode.innerHTML = `\n  <style>\n    .toggle-container {\n      display: flex;\n      flex-direction: row;\n      gap: 40px;\n      justify-content: center;\n      padding-top: 40px;\n    }\n    .toggle-group {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .switch {\n      position: relative;\n      display: inline-block;\n      width: 60px;\n      height: 34px;\n    }\n    .switch input {\n      opacity: 0;\n      width: 0;\n      height: 0;\n    }\n    .slider {\n      position: absolute;\n      cursor: pointer;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: #ccc;\n      transition: 0.4s;\n      border-radius: 34px;\n    }\n    .slider:before {\n      position: absolute;\n      content: \"\";\n      height: 26px;\n      width: 26px;\n      left: 4px;\n      bottom: 4px;\n      background-color: white;\n      transition: 0.4s;\n      border-radius: 50%;\n    }\n    input:checked + .slider {\n      background-color: rgb(149, 78, 215);\n    }\n    input:checked + .slider:before {\n      transform: translateX(26px);\n    }\n    .state-text {\n      margin-top: 10px;\n      font-size: 18px;\n      color: white;\n    }\n    .label {\n      color: white;\n      font-weight: bold;\n      margin-bottom: 5px;\n    }\n  </style>\n\n  <div class=\"toggle-container\">\n    <div class=\"toggle-group\">\n      <div class=\"label\">wifi</div>\n      <label class=\"switch\">\n        <input type=\"checkbox\" id=\"button1\">\n        <span class=\"slider\"></span>\n      </label>\n      <div id=\"stateOne\" class=\"state-text\">0</div>\n    </div>\n\n    <div class=\"toggle-group\">\n      <div class=\"label\">bluetooth</div>\n      <label class=\"switch\">\n        <input type=\"checkbox\" id=\"button2\">\n        <span class=\"slider\"></span>\n      </label>\n      <div id=\"stateTwo\" class=\"state-text\">0</div>\n    </div>\n  </div>\n`;\n\nfunction handleToggle(checkboxId, stateId, topic, storageKey) {\n  const checkbox = htmlNode.querySelector(`#${checkboxId}`);\n  const stateText = htmlNode.querySelector(`#${stateId}`);\n\n  const saved = localStorage.getItem(storageKey);\n  if (saved === \"1\") {\n    checkbox.checked = true;\n    stateText.textContent = \"1\";\n  }\n\n  checkbox.addEventListener(\"change\", () => {\n    const value = checkbox.checked ? \"1\" : \"0\";\n    stateText.textContent = value;\n    localStorage.setItem(storageKey, value);\n\n    fetch(\"http://localhost:1880/publish\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        topic: topic,\n        payload: value\n      })\n    }).then(res => {\n      if (!res.ok) {\n        console.error(\"MQTT publish failed:\", res.statusText);\n      }\n    }).catch(err => console.error(\"Fetch error:\", err));\n  });\n}\n\nhandleToggle(\"button1\", \"stateOne\", \"topic/button3\", \"toggleStateOne\");\nhandleToggle(\"button2\", \"stateTwo\", \"topic/button3\", \"toggleStateTwo\");\n\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "refId": "A"
        }
      ],
      "title": "Panel Title",
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-BlPu"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.IR Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "IR Sensor 01"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.K Type Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "K Type Sensor 01"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Miller Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Miller Sensor 01"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Mixer Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Mixer Sensor 01"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 0,
        "y": 8
      },
      "id": 1,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "query": "SELECT last(\"IR_Sensor_1\") AS \"IR Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"K_Type_Sensor_1\") AS \"K Type Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"Current_Miller_1\") AS \"Current Miller Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"Current_Mixer_1\") AS \"Current Mixer Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "D",
          "resultFormat": "time_series"
        }
      ],
      "title": "Device 1",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-BlPu"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.IR Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "IR Sensor 02"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.K Type Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "K Type Sensor 02"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Miller Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Miller Sensor 02"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Mixer Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Mixer Sensor 02"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 6,
        "y": 8
      },
      "id": 2,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "query": "SELECT last(\"IR_Sensor_2\") AS \"IR Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"K_Type_Sensor_2\") AS \"K Type Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"Current_Miller_2\") AS \"Current Miller Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"Current_Mixer_2\") AS \"Current Mixer Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "D",
          "resultFormat": "time_series"
        }
      ],
      "title": "Device 2",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-BlPu"
          },
          "decimals": 1,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.IR Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "IR Sensor 03"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.K Type Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "K Type Sensor 03"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Miller Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Miller Sensor 03"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Mixer Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Mixer Sensor 03"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 12,
        "y": 8
      },
      "id": 3,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "horizontal",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "value_and_name",
        "wideLayout": true
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "query": "SELECT last(\"IR_Sensor_3\") AS \"IR Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"K_Type_Sensor_3\") AS \"K Type Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"Current_Miller_3\") AS \"Current Miller Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        },
        {
          "query": "SELECT last(\"Current_Mixer_3\") AS \"Current Mixer Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' AND time > now() - 1h",
          "rawQuery": true,
          "refId": "D",
          "resultFormat": "time_series"
        }
      ],
      "title": "Device 3",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.IR Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "IR sensor 1"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.IR Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "IR sensor 2"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.IR Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "IR sensor 3"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "query": "SELECT mean(\"IR_Sensor_1\") AS \"IR Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT mean(\"IR_Sensor_2\") AS \"IR Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT mean(\"IR_Sensor_3\") AS \"IR Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        }
      ],
      "title": "IR sensors",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.K Type Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "K type sensor 1"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.K Type Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "K type sensor 2"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.K Type Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "K type sensor 3"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 16
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "query": "\nSELECT last(\"K_Type_Sensor_1\") AS \"K Type Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT last(\"K_Type_Sensor_2\") AS \"K Type Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT last(\"K_Type_Sensor_3\") AS \"K Type Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        }
      ],
      "title": "K type sensors",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Miller Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current miller 1"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Miller Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current miller 2"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Miller Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current miller 3"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 24
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "query": "\nSELECT last(\"Current_Miller_1\") AS \"Current Miller Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT last(\"Current_Miller_2\") AS \"Current Miller Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT last(\"Current_Miller_3\") AS \"Current Miller Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        }
      ],
      "title": "Current miller",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Mixer Sensor 03"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current mixer 3"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Mixer Sensor 02"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current mixer 2"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "sensor_data.Current Mixer Sensor 01"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current mixer 1"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 24
      },
      "id": 7,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.5.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "query": "SELECT last(\"Current_Mixer_1\") AS \"Current Mixer Sensor 01\" FROM \"sensor_data\" WHERE \"device\" = '1' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "A",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT last(\"Current_Mixer_2\") AS \"Current Mixer Sensor 02\" FROM \"sensor_data\" WHERE \"device\" = '2' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "B",
          "resultFormat": "time_series"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "hide": false,
          "query": "SELECT last(\"Current_Mixer_3\") AS \"Current Mixer Sensor 03\" FROM \"sensor_data\" WHERE \"device\" = '3' GROUP BY time(10s)",
          "rawQuery": true,
          "refId": "C",
          "resultFormat": "time_series"
        }
      ],
      "title": "Currrent mixer",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-mqtt-datasource",
        "uid": "PBA9FB8DAC51D59B8"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 32
      },
      "id": 10,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "* {\n  font-family: Open Sans;\n}\n\n.box {\n  border: solid #555 2px;\n  border-radius: 10px;\n  padding: 10px 20px;\n}\n.container{\n  height:100vh;\n  width: 100%;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n}\n.button{\n  background-color: rgb(204, 193, 193);\n  width: 100px;\n  height:50px;\n  border-radius: 100px;\n  cursor:pointer;\n  position:relative;\n  transition: 0.2s;\n  align-items: center;\n  justify-content:center;\n}\n.button::before{\n  position: absolute;\n  content: '';\n  background-color:#fff;\n  width:45px;\n  height:45px;\n  border-radius: 100px;\n  margin:2.5px;\n  transition:0.2s;\n}\ninput:checked+.button{\n  background-color: rgb(19, 15, 71);\n}\n\ninput:checked+.button::before{\n  transform: translateX(50px);\n}\n\ninput{\n  display:none;\n}\n\nsvg{\n  width: 30px;\n  color: black;\n  position: absolute;\n}\n\nh3{\n  padding-left: 15px;\n}\n\n.off{\ncolor: black;\n}",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "\n<div class=\"container\">\n   <input type=\"checkbox\" id=\"check\">\n   <label for= \"check\"class=\"button\">\n          <h3>ON</h3>\n</div>\n\n",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "// Sets the value from the first series on every refresh\nconst htmlgraphicsValue = htmlNode.getElementById('htmlgraphics-value');\n\nif (htmlgraphicsValue) {\n  const valueField = data.series[0]?.fields[1];\n  if (valueField) {\n    const length = valueField.values.length;\n    htmlgraphicsValue.textContent = valueField.values.get(length - 1);\n  } else {\n    htmlgraphicsValue.textContent = \"No data\"\n  }\n}\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "median",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.1.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-mqtt-datasource",
            "uid": "PBA9FB8DAC51D59B8"
          },
          "refId": "A",
          "topic": "test/topic"
        }
      ],
      "title": "Bluetooth",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    }
  ],
  "preload": false,
  "refresh": "auto",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "2025-04-07T17:58:25.472Z",
    "to": "2025-04-07T18:08:25.472Z"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Automated Sensor Dashboard - DSI",
  "uid": "sensor-dashboard",
  "version": 3,
  "weekStart": ""
}